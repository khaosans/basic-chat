[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "basic-chat-template"
version = "0.1.0"
description = "AI Chat Application with Enhanced Reasoning and Document Processing"
authors = [{name = "Souriya Khaosanga", email = "souriya@chainable.ai"}]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "streamlit>=1.28.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "langchain>=0.0.340",
    "langchain-community>=0.0.11",
    "langchain-experimental>=0.0.40",
    "langchain-core>=0.1.0",
    "langchain-ollama>=0.1.0",
    "pydantic>=2.0.0",
    "gTTS>=2.3.2",
    "pytz>=2023.3",
    "chromadb>=0.4.0",
    "pillow>=10.0.0",
    "pypdf>=3.0.0",
    "unstructured>=0.10.0",
    "unstructured-inference>=0.7.0",
    "unstructured-pytesseract>=0.3.15",
    "sentence-transformers>=2.2.0",
    "duckduckgo-search>=4.1.1",
    "pi_heif>=0.13.0",
    "opencv-python>=4.8.0",
    "pdf2image>=1.16.3",
    "pdfminer.six>=20250506",
    "pymupdf>=1.23.0",
    "pytesseract>=0.3.10",
    "easyocr>=1.7.0",
    "imageio>=2.31.0",
    "imageio-ffmpeg>=0.4.8",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "redis>=4.5.0",
    "cachetools>=5.3.0",
    "structlog>=23.1.0",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "flake8>=6.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.5",
    "pyright>=1.1.300",
    "pydocstyle>=6.3.0",
    "mccabe>=0.7.0",
    "safety>=2.3.0",
    "semgrep>=1.50.0",
    "radon>=6.0.0",
    "xenon>=0.8.0",
    "autoflake>=2.2.0",
    "pyupgrade>=3.15.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "pre-commit>=3.5.0",
    "ipython>=8.15.0",
    "jupyter>=1.0.0",
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["utils", "tests"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "langchain.*",
    "langchain_community.*",
    "langchain_core.*",
    "langchain_experimental.*",
    "easyocr.*",
    "pytesseract.*",
    "unstructured.*",
    "chromadb.*",
    "gtts.*",
    "PIL.*",
    "cv2.*",
    "pymupdf.*",
    "duckduckgo_search.*",
    "redis.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0621",  # redefined-outer-name
    "W0703",  # broad-except
    "C0103",  # invalid-name (for some cases)
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 10
max-branches = 15
max-statements = 60
max-parents = 7
max-attributes = 10

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
    "F401",  # imported but unused (handled by autoflake)
    "F841",  # local variable assigned but never used
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and mktemp_q

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/migrations/*",
    "*/site-packages/*",
    "*/dist/*",
    "*/build/*",
    "*/eggs/*",
    "*/parts/*",
    "*/bin/*",
    "*/var/*",
    "*/srv/*",
    "*/lib/*",
    "*/lib64/*",
    "*/include/*",
    "*/share/*",
    "*/pyvenv.cfg",
    "*/MANIFEST.in",
    "*/setup.py",
    "*/setup.cfg",
    "*/tox.ini",
    "*/pytest.ini",
    "*/conftest.py",
    "*/requirements*.txt",
    "*/pyproject.toml",
    "*/README.md",
    "*/LICENSE",
    "*/Makefile",
    "*/Dockerfile*",
    "*/.git*",
    "*/.github/*",
    "*/.gitignore",
    "*/.editorconfig",
    "*/.pre-commit-config.yaml",
    "*/.flake8",
    "*/.pylintrc",
    "*/.mypy.ini",
    "*/.coveragerc",
    "*/htmlcov/*",
    "*/coverage.xml",
    "*/coverage.json",
    "*/coverage.html",
    "*/coverage.info",
    "*/coverage.dat",
    "*/coverage.rc",
    "*/coverage.ini",
    "*/coverage.cfg",
    "*/coverage.toml",
    "*/coverage.yaml",
    "*/coverage.yml",
    "*/coverage.json",
    "*/coverage.xml",
    "*/coverage.html",
    "*/coverage.info",
    "*/coverage.dat",
    "*/coverage.rc",
    "*/coverage.ini",
    "*/coverage.cfg",
    "*/coverage.toml",
    "*/coverage.yaml",
    "*/coverage.yml",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.radon]
cc_min = "A"
mi_min = "A"
hal_std_switch = 10
hal_ignore = ["venv", "tests", ".venv"]

[tool.xenon]
max_complexity = 10
ignore = ["venv", "tests", ".venv"]

[tool.semgrep]
config = ["p/security-audit", "p/bandit"]

[tool.pyright]
include = ["."]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/venv",
    "**/.venv",
    "**/tests",
    "**/build",
    "**/dist",
]
reportMissingImports = "warning"
reportMissingTypeStubs = false
pythonVersion = "3.9"
pythonPlatform = "Darwin"
typeCheckingMode = "basic" 